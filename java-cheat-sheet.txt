j mvn clean install
j mvn clean install -DskipTests -Dmaven.test.skip=true
export SERVER_ENV=sandbox
j mvn -o -f *-war/pom.xml jetty:run
time j r with-cwd *-test/cucumber/ bundle exec cucumber

networksetup -setsocksfirewallproxystate Wi-Fi off
networksetup -setsocksfirewallproxystate Wi-Fi on

git update-ref refs/heads/master `git rev-parse refs/remotes/trunk` `git rev-parse refs/heads/master`

mvn dependency:sources
mvn dependency:resolve -Dclassifier=javadoc


Questions

How to arrange for view-source to work?


MDJ notes:
	s3:
		uri is s3:X<key>
			where X is assumed to be a slash
		supports a single bucket
		supports gzip (on or off for whole mdj instance)
		supports encryption (key or not for whole mdj instance)
	neufs:
		uri is neufs:/<path relative to neufs root>
		read only
	delta:
		uri is delta://borghostname?/path...??



Attaching to a running process
------------------------------

export MAVEN_OPTS="-Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,address=5005,server=y,suspend=n"
env SERVER_ENV=component-test ./run
jvm is now running and listening on port 5005

In intellij:

Run, Edit Configurations. Add.  Base on "Remote".  Check port is 5005.
Set breakpoints.
"Debug" (ctrl-D)
Should say: Connected to the target VM, address: 'localhost:5005', transport: 'socket'

Now run something which hits the breakpoint.  e.g.
export NO_START_UNDER_TEST=1
./test

Of course if you're running a cucumber test you'll need to make sure it'll
wait for the JVM, which might pause for a long time - increase the test
timeouts.



mvn help:help
mvn dependency:help

mvn dependency:tree
mvn dependency:tree -Dverbose=true

mvn dependency:analyze - look for undeclared transitive dependencies

mvn help:effective-pom - show effective pom

pom - can add/override, but never subtract

??? how to see effective pom, and see where each thing comes from?





Should it be good practice always to fix dependency:analyze problems?

tool for visual dependency resolution (graph)?



different classpaths for different classes???

compile <= runtime <= test
"provided" - in compile, but not runtime (reasons unclear)





mvn dependency:tree -Dverbose=true

dependencyManagement - pinning versions, use sparingly

add the maven enforcer plugin, it'll make the build fail on version conflicts,
it'll be a big list at first but work through it one by one

in general, do not pin versions of transitive dependencies

otherwise often pin to newest

http://www.mojohaus.org/exec-maven-plugin/exec-mojo.html
mvn -q exec:exec -DclasspathScope=compile -Dexec.executable=/bin/echo -Dexec.args=%classpath | -
mvn -q exec:exec -DclasspathScope=test -Dexec.executable=/bin/echo -Dexec.args=%classpath | -
mvn -q exec:exec -DclasspathScope=runtime -Dexec.executable=/bin/echo -Dexec.args=%classpath | -
default is runtime


mvn exec:java -Dexec.mainClass=uk.org.rve.javalearning.Main

